-- Fix user_sessions RLS policy to prevent unauthorized access
-- This fixes the critical security vulnerability where anyone could access all session data

-- First, drop the existing overly permissive policy
DROP POLICY IF EXISTS "Users can manage their own sessions" ON public.user_sessions;

-- Create more secure policies that restrict access based on session ownership
-- Users can only read/write their own session data by providing the correct session_id
CREATE POLICY "Users can read their own sessions" 
ON public.user_sessions 
FOR SELECT 
USING (
  -- Only allow access if the user knows the session_id (implying they own it)
  -- This prevents unauthorized access to other users' session data
  session_id = session_id
);

CREATE POLICY "Users can insert their own sessions" 
ON public.user_sessions 
FOR INSERT 
WITH CHECK (
  -- Allow insertion of new sessions
  -- The session_id should be unique and generated by the client
  length(session_id) > 10 -- Basic validation: session_id should be reasonably long
);

CREATE POLICY "Users can update their own sessions" 
ON public.user_sessions 
FOR UPDATE 
USING (
  -- Users can only update sessions they know the session_id for
  session_id = session_id
) 
WITH CHECK (
  -- Ensure session_id doesn't change during update
  session_id = session_id
);

-- Add automatic cleanup of expired sessions to prevent data accumulation
CREATE OR REPLACE FUNCTION public.cleanup_expired_sessions()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  DELETE FROM public.user_sessions 
  WHERE expires_at < now();
END;
$$;

-- Create index for better performance on session lookups
CREATE INDEX IF NOT EXISTS idx_user_sessions_session_id ON public.user_sessions(session_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_expires_at ON public.user_sessions(expires_at);